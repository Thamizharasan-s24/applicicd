name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger pipeline when changes are pushed to the `main` branch

jobs:
  build-and-deploy:
    runs-on:ubunut-latest  # GitHub runner environment

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Buildx (Optional but recommended for better caching)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t appli .
        docker tag appli:latest appli:$GITHUB_SHA

    # Step 4: Run tests on the Docker container (Optional)
    - name: Run tests
      run: |
        docker run -d -p 8089:80 appli
        sleep 5  # Wait for the container to start
        curl -f http://localhost:8089 || exit 1  # Check if the app is up
        docker stop $(docker ps -q)

    # Step 5: Deploy to EC2 using SSH
    - name: Deploy to EC2
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        # Save private SSH key from GitHub Secrets
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa  # Ensure correct file permissions for the key

        # Disable SSH host key checking (for automation)
        echo "StrictHostKeyChecking=no" >> ~/.ssh/config

        # SSH into EC2 and run deployment commands
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Stop and remove any old containers
          docker stop my-running-app || true
          docker rm my-running-app || true

          # Run the new container with updated image
          docker run -d -p 80:80 --name my-running-app appli:latest
          echo "Deployment Successful"
        EOF
